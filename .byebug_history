c
n
exit
person&.locations&.exists?(location.id)
person.nil?
person
exit
c
cc
c
n
person
c
location
c
location
c
location
c
location
c
location
c
location
c
location
c
location
c
location
c
n
location
n
location
person&.locations&.exists?(location.id)
n
person&.locations&.exists?(location.id)
person.nil?
location
exit
person.nil?
n
person = Person.find_or_initialize_by(first_name: names[0])
Person.find_by(first_name: names[0])
names[0]
c
names[0]
c
print "#{row["Affiliations"]}\n\n#{row["Location"]}"
c
print "#{row["Affiliations"]}\n\n#{row["Location"]}"
c
print "#{row["Affiliations"]}\n\n#{row["Location"]}"
c
print "#{row["Affiliations"]}\n\n#{row["Location"]}"
c
print "#{row["Affiliations"]}\n\n#{row["Location"]}"
c
print "#{row["Affiliations"]}\n\n#{row["Location"]}"
c
print "#{row["Affiliations"]}\n\n#{row["Location"]}"
c
print "#{row["Affiliations"]}\n\n#{row["Location"]}"
c
print "#{row["Affiliations"]}\n\n#{row["Location"]}"
c
print "#{row["Affiliations"]}\n\n#{row["Location"]}"
c
print "#{row["Affiliations"]}\n\n#{row["Location"]}"
c
print "#{row["Affiliations"]}\n\n#{row["Location"]}"
c
row
row["Affiliations"]
c
row["Affiliations"]
c
row["Affiliations"]
c
row["Affiliations"]
c
row["Affiliations"]
c
row["Affiliations"]
c
row["Affiliations"]
c
row["Affiliations"]
c
exit
c
n
affilation_names.each {|x| print x}
affilation_names.each {|x| print "x"}
affilation_names.each do |name|
affilation_names
n
affilation_names
affiliation_names
n
row
c
cc
c
exit
c
last_name
exit
c
row
row["Name"].split(" ")[2]
row["Name"].split(" ")
row["Name"].split(",")
row["Name"]
row
c
exit
exirt
Upload.create!!(params.permit(:file))
Upload.save!(params.permit(:file))
params.require(:file)
params.require("file")
params.require("file").permit("file")
params.require("file").permit(:file)
params.require("file").permit(file)
params.require("file")
Upload.new(file: params["file"]).save!
Upload.new(file: params["file"])
params
exit
csv.each do |row|
  print "#{(row.to_hash)}\n\n\n"
end
csv.each do |row|
  Moulding.create!(row.to_hash)
end
csv = CSV.parse(csv_text, :headers => true)
csv_text = File.read(file)
file = params[:file]
exit
require 'csv'
params
exit
